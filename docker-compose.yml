version: "3.5"

services:
  #Irei usar um backend em golang por ser mais simples de desenvolver e mantendo um tamanho pequeno (dado o escopo)
  go-server:
    container_name: golang-server
    image: golang-server:1.0.0

    environment:
      - DB_HOSTNAME=db
    ports:
      - "${SERVER_PORT}:${SERVER_PORT}"
    depends_on:
      db:
        condition: service_healthy #Vai esperar ate que a db esteja pronta para uso

    restart: on-failure
    env_file: .env
    build:
      context: ./server/
      dockerfile: go.Dockerfile
    deploy:
      resources:
        limits:
          cpus: "0.6"
          memory: "200MB"

  db:
    container_name: golang-server-db
    image: postgres:latest
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - ./script.sql:/docker-entrypoint-initdb.d/script.sql #Montando o script de criacao da tabela no container
    #So para caso o servico nao esteja pronto antes de alguma requisicao
    healthcheck:
      test: pg_isready -U postgres

    deploy:
      resources:
        limits:
          cpus: "0.13"
          memory: "140MB"

          #  #Para o frontend irei utilizar o fastify por ser mais leve e performatico se comparado ao express
          #  app-email-form:
          #    image: node:21-alpine
          #    command: sh -c "npm install && npm run start"
          #    working_dir: /app
          #    volumes:
          #      - ./frontend:/app
          #    ports:
          #      - "${APP_PORT}:${APP_PORT}"
          #
          #    #Limitando os recursos do front ja que eh apenas um formulario que sera mostrado
          #    deploy:
          #      resources:
          #        limits:
          #          cpus: "0.17"
          #          memory: "10MB"
          #
          #  #definindo o servico de proxy reverso para o frontend, para maior seguranca
          #  nginx:
          #    image: nginx:latest
          #    ports:
          #      - "80:80"
          #    volumes:
          #      - ./nginx.conf:/etc/nginx/nginx.conf:ro #Montando as configuracoes do nginx no container
          #    depends_on:
          #      - app-email-form
          #    deploy:
          #      resources:
          #        limits:
          #          cpus: "0.17"
          #          memory: "50MB"
#Definindo a default network no nosso projeto
networks:
  default:
    driver: bridge
    name: redway-application
